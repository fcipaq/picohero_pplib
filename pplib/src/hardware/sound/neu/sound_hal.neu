/*
 * pplib - a library for the Pico Held handheld
 *
 * Copyright (C) 2023 Daniel Kammer (daniel.kammer@web.de)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
 
 
/* ----------------------------- PIO -----------------------------*/
PIO snd_pio = pio0;
int8_t snd_pio_sm = 0;  // pioinit will claim a free one

// Updated later with the loading offset of the PIO program.
uint32_t snd_pio_program_offset = 0;

/* ----------------------------- DMA -----------------------------*/
int32_t snd_dma_chan;
dma_channel_config snd_dma_config;

uint8_t snd_dma_enabled = 0;

/*
 * Set output frequency in Hz
 */
int snd_set_freq(uint32_t freq) {
  if (!snd_init_complete)
    return SND_NOT_INIT;

  uint32_t fcpu = clock_get_hz(clk_sys);

  // 133 MHz delivers 44 kHz sound output @ full speed
#ifdef SND_SINGLE_CHANNEL
  freq *= 1500;
#else
  freq *= 3022;
#endif

  uint16_t clock_div = fcpu / freq;
  uint16_t fract_div = (uint16_t)(((float)fcpu / (float)freq - (float)clock_div) * 256.0);

  // max speed exceeded
  if (clock_div == 0) {
    clock_div = 1;
    fract_div = 0;
  }

  // Set clock divider and fractional divider
  pio_sm_set_clkdiv_int_frac(snd_pio, snd_pio_sm, clock_div, fract_div);

  return SND_SUCCESS;
}

bool snd_irq_enabled(void) {
  return irq_is_enabled(DMA_IRQ_1);
}

bool snd_get_irq_status(void) {
   return dma_channel_get_irq1_status(snd_dma_chan);
}

void snd_acknowledge_irq(void) {
  dma_channel_acknowledge_irq1(snd_dma_chan);
}

void snd_dma_tx(uint16_t* buf, uint32_t buf_len) {
  dma_channel_configure(snd_dma_chan, &snd_dma_config, &snd_pio->txf[snd_pio_sm], buf, buf_len, true);
}

bool snd_dma_busy(int32 snd_dma_chan) {
  return dma_channel_is_busy(snd_dma_chan);
}

bool snd_pio_init() {

  snd_pio_sm = pio_claim_unused_sm(snd_pio, false);

  if (snd_pio_sm < 0)
    return false;

  snd_pio_program_offset = pio_add_program(snd_pio, &snd_output_program);

  pio_gpio_init(snd_pio, PIN_SND);

  pio_sm_set_consecutive_pindirs(snd_pio, snd_pio_sm, PIN_SND, 1, true);

  pio_sm_config c = snd_output_program_get_default_config(snd_pio_program_offset);

  sm_config_set_sideset_pins(&c, PIN_SND);

  pio_sm_init(snd_pio, snd_pio_sm, snd_pio_program_offset, &c);

  // set ISR (containing the PWM period) and
  // put value to the FIFO
#ifdef SND_SINGLE_CHANNEL
  pio_sm_put_blocking(snd_pio, snd_pio_sm, 256 * 2);
#else
  pio_sm_put_blocking(snd_pio, snd_pio_sm, 256 * SND_NUM_CHAN);
#endif
  pio_sm_exec(snd_pio, snd_pio_sm, pio_encode_pull(false, false));
  pio_sm_exec(snd_pio, snd_pio_sm, pio_encode_out(pio_isr, 32));

  pio_sm_set_enabled(snd_pio, snd_pio_sm, true);

  return true;
}  //pioInit
 
bool snd_dma_init() {
  if (snd_dma_enabled)
    return false;

  snd_dma_chan = dma_claim_unused_channel(false);

  if (snd_dma_chan < 0)
    return false;

  snd_dma_config = dma_channel_get_default_config(snd_dma_chan);

  channel_config_set_transfer_data_size(&snd_dma_config, DMA_SIZE_16);
  channel_config_set_dreq(&snd_dma_config, pio_get_dreq(snd_pio, snd_pio_sm, true));

  dma_channel_set_irq1_enabled(snd_dma_chan, true);

  irq_set_exclusive_handler(DMA_IRQ_1, snd_dma_handler);

  snd_dma_enabled = true;

  return true;
}

void snd_dma_shutdown(void) {
  if (!snd_dma_enabled)
    return;

  dma_channel_unclaim(snd_dma_chan);

  snd_dma_enabled = false;
}

int snd_hw_init(void) {
  if (!snd_pio_init())
    return SND_PIO_ERR;

  if (!snd_dma_init())
    return SND_DMA_ERR;
}